var config = { // —Ç—É—Ç–æ –º–∏ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ü–µ–Ω–∫—É
    type: Phaser.AUTO,
    width: 1920,
    width: 1980,
    height: 1080,
    scene: {
        parent:game,
        physics: {  //–∑–∞–¥–∞—î–º–æ —Å—Ç–∏–ª—å —Ñ—ñ–∑–∏–∫–∏ –≥—Ä–∏
            default: 'arcade',
            arcade: {
                gravity: { y: 200 },  //–¥–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é
                debug: false
            }
        },
        preload: preload,
        create: create,
        update: update
    }
};

var game = new Phaser.Game(config);  //—Ç—É—Ç –º–∏ –¥–µ—â–æ —Ç–µ–∂ –¥–æ–¥–∞—î–º–æ :)
var worldWidth = 9600
var console = console;
var plants;
var platform;
var worldWight = config.width = 10;
var life = 5;

function preload ()// —Ç—É—Ç –º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –≥—Ä–∏
{

    this.load.image('sky', 'assets/sky.jpeg');
    this.load.image('sky', 'assets/1.jpg');
    this.load.image('ground', 'assets/tile.png');
    this.load.image('plant', 'assets/plant.png');
    this.load.image('star', 'assets/star.png');
    this.load.image('bomb', 'assets/bomb.png');
    this.load.image('stair', 'assets/stairs.png');
    this.load.image('spike', 'assets/spike1.png');
    this.load.spritesheet('dude', 
        'assets/dude.png',
        { frameWidth: 32, frameHeight: 48 }
        );
       
    }
    
    function create ()
    {

        
var score = 0;
var scoreText;
scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });  //—Ü–µ –ø–æ–∫–∏ —â–æ –Ω–µ –Ω–∞–¥–æ
function collectStar (player, star)
{
    star.disableBody(true, true);

    score += 10;
    scoreText.setText('Score: ' + score);
}

        cursors = this.input.keyboard.createCursorKeys();
        this.add.image(960, 540, 'sky');   //—Ç—É—Ç –º–∏ –º–æ–∂–Ω–∞ —Å–∫–∞–∑–∞—Ç–∏ –¥–æ–∞—î–º–æ –Ω–∞ —Å—Ü–µ–Ω—É –Ω–∞—à —Ñ–æ–Ω
    
        platforms = this.physics.add.staticGroup();
    
        // platforms.create(400, 568, 'ground').setScale(2).refreshBody();    //—Ü–µ –Ω–µ –Ω–∞–¥–∞ –≤–∑–∞–≥–∞–ª—ñ
        // platforms.create(1750, 568, 'ground').setScale(2).refreshBody();
        // platforms.create(1750, 400, 'ground');
        // platforms.create(1400, 250, 'ground').setScale(0.5).refreshBody();
        // platforms.create(1750, 200, 'ground').setScale(0.2).refreshBody();
        // platforms.create(960, 1070, 'ground').setScale(5).refreshBody();
    
        // platforms.create(400, 380, 'ground');
        // platforms.create(130, 150, 'ground');
        // platforms.create(600, 350, 'ground'); 

for (var x = 0; x < worldWidth; x = x + 400) {
    console.log(x)
    platforms.create(x, 700, 'ground').setOrigin(0, 0).refreshBody().setScale(1);  //—Ç—É—Ç –º–∏ –¥–æ–¥–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ —è–∫—ñ —Å–ø–∞—É–Ω—è—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –æ–±—Ä–∞–∑–æ–º
}

        player = this.physics.add.sprite(100, 450, 'dude');  //–¥–æ–¥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —ñ –∑–∞–¥–∞—î–º–æ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä–∏ —ñ –æ—Å—å 
         player.setScale(0.8)
         player.setBounce(0.1);
         player.setCollideWorldBounds(true);


         
spike = this.physics.add.staticGroup();
for (var x = 0; x < worldWidth; x=x+Phaser.Math.FloatBetween(200, 500)){
    spike
    .create(x, 830 - 120, 'spike')
    .setOrigin(0, 1)
    .setScale(Phaser.Math.FloatBetween(0.5, 2))
    .setDepth(Phaser.Math.Between(-10, 10));
}

for (var x = 0; x < worldWidth; x = x + Phaser.Math.Between(600, 700)) { 
    var y = Phaser.Math.FloatBetween(700, 10 * 10) 
    platforms.create(x, y, 'ground'); 
    var i; 
    for (i = 1; i < Phaser.Math.Between(0, 5); i++) {
         platforms.create(x + 700 * i, y, 'ground');
         } platforms.create(x + 700 * i, y, 'ground'); }

this.anims.create({   //—Å—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    key: 'left',
    frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
    frameRate: 10,
    repeat: -1
});

this.anims.create({
    key: 'turn',
    frames: this.anims.generateFrameNumbers("dude", {
        frames: [4],
      }),
    frameRate: 10,
    repeat: -1
});

this.anims.create({
    key: 'right',
    frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
    frameRate: 10,
    repeat: -1
});
player.body.setGravityY(100)   //–∑–∞–¥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é
this.physics.add.collider(player, platforms);  //—Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–º—É –∫–æ–ª—ñ–∑—ñ—é

stars = this.physics.add.group({   //–¥–æ–¥–∞—î–º–æ –∑—ñ—Ä–æ—á–∫–∏
    key: 'star',
    repeat: 15,
    setXY: { x: 0, y: 0, stepX: 120 }
});

stars.children.iterate(function (child) {

    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));

});

this.physics.add.collider(stars, platforms); // –∑–∞–¥–∞—î–º–æ –∫–æ–ª—ñ–∑—ñ—é
this.physics.add.overlap(player, stars, collectStar, null, this);
function collectStar (player, star)



{
    star.disableBody(true, true);
}
if (stars.countActive(true) === 0) // —è–∫—â–æ –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –∑—ñ—Ä–æ–∫
{
    // –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É—Å—ñ –∑—ñ—Ä–∫–∏
    stars.children.iterate(function (child) {
        child.enableBody(true, child.x, 0, true, true);
    });

    // –æ–±—Ä–∞—Ç–∏ x –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É –≤—ñ–¥ –≥—Ä–∞–≤—Ü—è, –≤–∏–ø–∞–¥–∫–æ–≤–æ
    var x = (player.x < 800) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);

    // —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–¥–Ω—É –±–æ–º–±—É
    var bomb = bombs.create(x, 800, 'bomb');
    bomb.setBounce(0.999); // –º–∞–π–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—Ç—Ä–∏–±—É—á—ñ—Å—Ç—å
    bomb.setCollideWorldBounds(true);
    bomb.setVelocity(Phaser.Math.Between(-200, 200), 20); // –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é

    // –∫–æ–ª–∏ —É—Å—ñ –∑—ñ—Ä–∫–∏ –∑–Ω–æ–≤—É –∑—ñ–±—Ä–∞–Ω—ñ, –¥–æ–¥–∞—î —â–µ 1 –±–æ–º–±—É, —ñ —Ç.–¥, –¥–∞—é—á–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑—ñ–±—Ä–∞—Ç–∏ —â–µ –±—ñ–ª—å—à–µ –æ—á–æ–∫
}

scoreText = this.add.text(100, 100, 'Score: 0', { fontSize: '20px', fill: '#FFF'})
.setOrigin(0,0)
.setScrollFactor(0)

lifeText = this.add.text(1500, 100, showLife(), {fontSize: '40px', fill: '#FFF'})
.setOrigin(0, 0)
.setScrollFactor(0)


var resetButton = this.add.text(400, 450, 'reset', {fontSize: '40px', fill: '#ccc'})
.setInteractive()
.setScrollFactor(0);

resetButton.on('pointerdown', function(){
    console.log('restart')
    refreshBody()
});













//   // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —Ä–æ—Å–ª–∏–Ω
//   plants = this.physics.add.group({
//     key: 'plant',
//     repeat: 5,
//     setXY: { x: 12, y: 0, stepX: 140 }
// });

// // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—ó –¥–ª—è —Ä–æ—Å–ª–∏–Ω
// plants.children.iterate(function (child) {
//     child.setGravityY(-200);
// });

    }

    function showLife() {
        var lifeLine = '–ñ–∏—Ç—Ç—è: '
    
        for (var i = 0; i < life; i++ ){
            lifeLine += 'üèì'
        }
        return lifeLine
    }

 
    function update ()
{
   
    // function updatePlantPositions() {
    //     plants.children.iterate(function (child));
    //     {
    //         // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π —Ä–æ—Å–ª–∏–Ω–∏ –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    //         var overlaps = false;
    //         platforms.children.iterate(function (platform) {
    //             if (Phaser.Geom.Intersects.RectangleToRectangle(child.getBounds(), platform.getBounds())) {
    //                 overlaps = true;
    //             }
    //         });


    this.cameras.main.setBounds(0, 0, worldWidth, window.innerHeight);  //—Ä–æ–±–∏–º–æ –∫–∞–º–µ—Ä—É —â–æ–± –≤–æ–Ω–∞ —Å—Ç–µ–∂–∏–ª–∞ –∑–∞ –≥—Ä–∞–≤—Ü–µ–º
    this.physics.world.setBounds(0, 0, worldWidth, window.innerHeight);
    this.cameras.main.startFollow(player);
      
    if (cursors.left.isDown)  //—Ä–æ–±–∏–º–æ –∫–µ—Ä—É–≤–∞–Ω—è –≥—Ä–∞–≤—Ü–µ–º
{
    player.setVelocityX(-160);

    player.anims.play('left', true);
}
else if (cursors.right.isDown)
{
    player.setVelocityX(160);

    player.anims.play('right', true);
}
else
{
    player.setVelocityX(0);

    player.anims.play('turn');
}

if (cursors.up.isDown && player.body.touching.down)
{
    player.setVelocityY(-330);
}

}
